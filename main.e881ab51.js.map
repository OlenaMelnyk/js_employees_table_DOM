{"version":3,"sources":["scripts/main.js"],"names":["addEmployeeRow","values","table","tableBody","document","querySelector","tBodies","cellsContent","map","object","index","textContext","length","Number","value","toLocaleString","style","currency","currencyDisplay","maximumFractionDigits","minimumFractionDigits","join","insertAdjacentHTML","tableHead","tHead","sortKeys","children","td","textContent","addEventListener","e","indexOf","target","clicked","sortByIndex","ascending","rows","isNumber","sorted","sort","rowA","rowB","textA","textB","slice","replace","localeCompare","row","append","body","options","option","textInputs","textName","labelName","toUpperCase","numberInputs","numberName","button","parentNode","elements","fname","name","position","office","age","salary","preventDefault","pushNotification","every","input","topPos","rightPos","title","description","type","notification","top","right","setTimeout","remove","selectedRow","selectedCell","lastText","activeInput","createElement","restoreCell","className","code","detail","classList","add","tagName","padding","getComputedStyle","inputWidth","offsetWidth","width","appendChild","focus"],"mappings":"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","file":"main.e881ab51.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\n(function sortHandler() {\n  const table = document.querySelector('table');\n\n  const tableHead = table.tHead;\n  const tableBody = table.tBodies[0];\n\n  const sortKeys = [...tableHead.children[0].children]\n    .map(td => td.textContent);\n\n  tableHead.addEventListener('click', (e) => {\n    const index = sortKeys.indexOf(e.target.textContent);\n\n    if (e.target.clicked === 'undefined') {\n      e.target.clicked = true;\n    } else {\n      e.target.clicked = !e.target.clicked;\n    }\n\n    sortByIndex(index, e.target.clicked);\n  });\n\n  function sortByIndex(index, ascending = true) {\n    const rows = [...tableBody.children];\n    const isNumber = index >= 3;\n\n    const sorted = rows.sort((rowA, rowB) => {\n      let textA = (ascending ? rowA : rowB).children[index].textContent;\n      let textB = (ascending ? rowB : rowA).children[index].textContent;\n\n      if (index === 4) {\n        textA = textA.slice(1).replace(/,/g, '');\n        textB = textB.slice(1).replace(/,/g, '');\n      }\n\n      if (isNumber) {\n        return textA - textB;\n      } else {\n        return textA.localeCompare(textB);\n      }\n    });\n\n    for (const row of sorted) {\n      tableBody.append(row);\n    }\n  }\n})();\n\n(function createForm() {\n  const body = document.querySelector('body');\n  const selectOptions = [\n    'Tokio', 'Singapore', 'London', 'New York', 'Edinburgh', 'San Francisco',\n  ];\n  const options = selectOptions\n    .map(option => `<option value=\"${option}\">${option}</option>`);\n  const textNames = ['name', 'position'];\n  const numberNames = ['age', 'salary'];\n  const textInputs = textNames.map(textName => {\n    const labelName = textName.slice(0, 1).toUpperCase() + textName.slice(1);\n\n    return `\n      <label>${labelName}:\n          <input\n            name=\"${textName}\"\n            type=\"text\"\n            data-qa=\"${textName}\"\n          required>\n      </label>\n    `;\n  }).join('');\n  const numberInputs = numberNames.map(numberName => {\n    const labelName = numberName\n      .slice(0, 1).toUpperCase() + numberName.slice(1);\n\n    return `\n      <label>${labelName}:\n          <input\n            name=\"${numberName}\"\n            type=\"number\"\n            data-qa=\"${numberName}\"\n          required>\n      </label>\n    `;\n  }).join('');\n\n  body.insertAdjacentHTML('beforeend', `\n    <form action=\"/createemployee\" class=\"new-employee-form\" method=\"get\">\n      ${textInputs}\n      <label>Office:\n        <select name=\"office\" id=\"office\" data-qa=\"office\">\n          ${options}\n        </select>\n      </label>\n      ${numberInputs}\n      <button type=\"submit\">\n        Save to table\n      </button>\n    </form>\n  `);\n})();\n\n(function addNewEmployee() {\n  const button = document.querySelector('.new-employee-form button');\n\n  button.addEventListener('click', (e) => {\n    const { name: fname, position, office, age, salary }\n      = button.parentNode.elements;\n\n    if (position.value.length === 0) {\n      e.preventDefault();\n\n      pushNotification(10, 10, 'Incorrect position',\n        'Position should not be empty', 'error');\n    } else if ([fname, office, age, salary]\n      .every(input => input.value.length > 0)) {\n      if (fname.value.length < 4) {\n        e.preventDefault();\n\n        pushNotification(10, 10, 'Incorrect name',\n          'Name should contain at least 4 characters', 'error');\n      } else if (age.value < 18 || age.value > 90) {\n        e.preventDefault();\n\n        pushNotification(10, 10, 'Incorrect age',\n          'Age should be between 18 and 90 years', 'error');\n      } else {\n        e.preventDefault();\n\n        addEmployeeRow([fname, position, office, age, salary]);\n\n        pushNotification(10, 10, 'Added new employee',\n          'New employee is successfully added', 'success');\n      }\n    }\n  });\n})();\n\nfunction addEmployeeRow(values) {\n  const table = document.querySelector('table');\n  const tableBody = table.tBodies[0];\n  const cellsContent = values.map((object, index) => {\n    const textContext = (index === values.length - 1)\n      ? Number(object.value).toLocaleString('en-US',\n        {\n          style: 'currency',\n          currency: 'USD',\n          currencyDisplay: 'symbol',\n          maximumFractionDigits: 0,\n          minimumFractionDigits: 0,\n        })\n      : `${object.value}`;\n\n    return `\n      <td>${textContext}</td>\n    `;\n  }).join('');\n\n  tableBody.insertAdjacentHTML('beforeend', `\n    <tr>\n      ${cellsContent}\n    </tr>\n  `);\n}\n\nconst pushNotification = function(topPos, rightPos, title, description, type) {\n  const body = document.querySelector('body');\n\n  body.insertAdjacentHTML('beforeend', `\n    <div class=\"notification ${type}\" data-qa=\"notification\">\n      <h2>${title}</h2>\n      <p>${description}</p>\n    </div>\n  `);\n\n  const notification = body.querySelector(`.${type}`);\n\n  notification.top = `${topPos}px`;\n  notification.right = `${rightPos}px`;\n\n  setTimeout(() => {\n    notification.remove();\n  }, 2000);\n};\n\n(function editEmployee() {\n  let selectedRow = null;\n  let selectedCell = null;\n  let lastText = null;\n  const activeInput = document.createElement('input');\n\n  activeInput.className = 'cell-input';\n\n  function restoreCell() {\n    selectedCell.textContent = (activeInput.value.length > 0)\n      ? activeInput.value\n      : lastText;\n    activeInput.value = '';\n    activeInput.remove();\n    selectedCell = null;\n  }\n\n  activeInput.addEventListener('blur', (e) => {\n    restoreCell();\n  });\n\n  const table = document.querySelector('table');\n  const tableBody = table.tBodies[0];\n\n  tableBody.addEventListener('keyup', (e) => {\n    if (e.code === 'Enter') {\n      restoreCell();\n    }\n  });\n\n  tableBody.addEventListener('click', (e) => {\n    if (e.detail === 1) {\n      if (selectedRow) {\n        selectedRow.classList.remove('active');\n      }\n      e.target.parentNode.classList.add('active');\n      selectedRow = e.target.parentNode;\n    }\n  });\n\n  tableBody.addEventListener('dblclick', (e) => {\n    e.preventDefault();\n\n    if (selectedCell) {\n      restoreCell();\n    }\n\n    if (e.target.tagName === 'TD') {\n      selectedCell = e.target;\n      lastText = selectedCell.textContent;\n\n      const padding = +(getComputedStyle(selectedCell).padding.slice(0, -2));\n      const inputWidth = selectedCell.offsetWidth - 2 * padding;\n\n      activeInput.style.width = `${inputWidth}px`;\n      selectedCell.textContent = '';\n      selectedCell.appendChild(activeInput);\n      activeInput.focus();\n    }\n  });\n})();\n"]}